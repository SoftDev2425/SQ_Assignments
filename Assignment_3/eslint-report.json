[
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/app.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/controllers/category.controller.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/controllers/task.controller.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 27,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 27,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [600, 603], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [600, 603], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 55,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 55,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1328, 1331], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1328, 1331], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 74,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 74,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1786, 1789], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1786, 1789], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 105,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 105,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [2616, 2619], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [2616, 2619], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 4,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Request, Response } from 'express'\nimport {\n  createTask,\n  deleteTask,\n  getAllTasks,\n  getTaskById,\n  updateTask,\n  updateTaskStatus,\n} from '../service/task.service'\nimport { NotFoundError } from '../utils/NotFoundErrorClass'\n\nconst handleCreateTask = async (req: Request, res: Response) => {\n  const { title, description, deadline, completed, usersId, tasksListsId } =\n    req.body\n\n  try {\n    const task = await createTask({\n      title,\n      description,\n      deadline,\n      completed,\n      usersId,\n      tasksListsId,\n    })\n\n    return res.status(201).json(task)\n  } catch (e: any) {\n    return res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nconst handleGetTaskById = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params\n\n    const task = await getTaskById(id)\n\n    return res.status(200).json(task)\n  } catch (e) {\n    if (e instanceof NotFoundError || (e as Error).name === 'NotFoundError') {\n      return res.status(404).json({ error: (e as Error).message })\n    }\n\n    return res\n      .status(500)\n      .json({ error: (e as Error).message || 'Internal server error' })\n  }\n}\n\nconst handleGetAllTasks = async (req: Request, res: Response) => {\n  try {\n    const tasks = await getAllTasks()\n\n    return res.status(200).json(tasks)\n  } catch (e: any) {\n    return res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nconst handleUpdateTask = async (req: Request, res: Response) => {\n  const { id } = req.params\n  const { title, description, deadline, completed, tasksListId } = req.body\n\n  try {\n    const task = await updateTask(id, {\n      title,\n      description,\n      deadline,\n      completed,\n      tasksListId,\n    })\n\n    return res.status(200).json(task)\n  } catch (e: any) {\n    return res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nconst handleDeleteTask = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params\n\n    await deleteTask(id)\n\n    return res.status(204).json({ message: 'Task deleted' })\n  } catch (e) {\n    if (e instanceof NotFoundError || (e as Error).name === 'NotFoundError') {\n      return res.status(404).json({ error: (e as Error).message })\n    }\n\n    return res\n      .status(500)\n      .json({ error: (e as Error).message || 'Internal server error' })\n  }\n}\n\nconst handleUpdateTaskStatus = async (req: Request, res: Response) => {\n  const { id } = req.params\n  const { completed } = req.body\n\n  try {\n    const task = await updateTaskStatus(id, completed as boolean)\n\n    return res.status(200).json(task)\n  } catch (e: any) {\n    return res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nexport default {\n  handleGetTaskById,\n  handleCreateTask,\n  handleGetAllTasks,\n  handleUpdateTask,\n  handleDeleteTask,\n  handleUpdateTaskStatus,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/controllers/user.controller.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 39,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 39,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1107, 1110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1107, 1110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 48,
        "column": 15,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 48,
        "endColumn": 18,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [1350, 1353], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [1350, 1353], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import { Request, Response } from 'express'\nimport { createUser, getAllUsers, getUserById } from '../service/user.service'\nimport { NotFoundError } from '../utils/NotFoundErrorClass'\n\nconst getUserByIdEP = async (req: Request, res: Response) => {\n  try {\n    const { id } = req.params\n\n    const user = await getUserById(id)\n\n    res.status(200).json(user)\n  } catch (e) {\n    if (e instanceof NotFoundError || (e as Error).name === 'NotFoundError') {\n      return res.status(404).json({ error: (e as Error).message })\n    }\n\n    console.error('Error in getUserById endpoint', (e as Error).message)\n    res\n      .status(500)\n      .json({ error: (e as Error).message || 'Internal server error' })\n  }\n}\n\nconst createUserEP = async (req: Request, res: Response) => {\n  const { name, password } = req.body\n\n  if (!name || !password) {\n    res.status(400).json({ error: 'Name and password are required' })\n  }\n\n  try {\n    const user = await createUser(name, password)\n\n    if (!user) {\n      return res.status(400).json({ error: 'Failed to create user' })\n    }\n\n    res.status(201).json(user)\n  } catch (e: any) {\n    res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nconst getAllUsersEP = async (req: Request, res: Response) => {\n  try {\n    const users = await getAllUsers()\n    res.status(200).json(users)\n  } catch (e: any) {\n    res.status(500).json({ error: e.message || 'Internal server error' })\n  }\n}\n\nexport default {\n  getUserByIdEP,\n  createUserEP,\n  getAllUsersEP,\n}\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/routes.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/routes/category.route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/routes/task.route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/routes/user.route.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/service/category.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/service/task.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/service/user.service.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/integration/task.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'prisma' is defined but never used.",
        "line": 2,
        "column": 8,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 2,
        "endColumn": 14
      },
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 122,
        "column": 61,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 122,
        "endColumn": 64,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [3476, 3479], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [3476, 3479], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 2,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import supertest from 'supertest'\nimport prisma from '../../../prisma/client'\nimport { app } from '../setup/setup'\nimport { createTestTask, createTestUser } from '../../utils/helperMethods'\n\ndescribe('Task', () => {\n  test('should get a task by id', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n    const testTask = await createTestTask(testUser.id)\n\n    // Act\n    const response = await supertest(app).get(`/api/tasks/${testTask.id}`)\n\n    const normalizedResponseBody = {\n      ...response.body,\n      createdAt: new Date(response.body.createdAt),\n      updatedAt: new Date(response.body.updatedAt),\n      deadline: new Date(response.body.deadline),\n    }\n\n    // Assert\n    expect(response.status).toBe(200)\n    expect(normalizedResponseBody).toEqual(testTask)\n  })\n\n  test('should create a task', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n\n    const task = {\n      title: 'Test Task',\n      description: 'Test Task Description',\n      deadline: new Date(),\n      completed: false,\n      usersId: testUser.id,\n    }\n\n    // Act\n    const response = await supertest(app).post('/api/tasks').send(task)\n\n    const normalizedResponseBody = {\n      title: response.body.title,\n      description: response.body.description,\n      deadline: new Date(response.body.deadline),\n      completed: response.body.completed,\n      usersId: response.body.userId,\n    }\n\n    // Assert\n    expect(response.status).toBe(201)\n    expect(normalizedResponseBody).toEqual(task)\n  })\n\n  test('should update a task', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n    const testTask = await createTestTask(testUser.id)\n\n    const updatedTask = {\n      title: 'Updated Task',\n      description: 'Updated Task Description From Test',\n      deadline: new Date(),\n      completed: true,\n    }\n\n    // Act\n    const response = await supertest(app)\n      .put(`/api/tasks/${testTask.id}`)\n      .send(updatedTask)\n\n    const normalizedResponseBody = {\n      title: response.body.title,\n      description: response.body.description,\n      deadline: new Date(response.body.deadline),\n      completed: response.body.completed,\n    }\n\n    // Assert\n    expect(response.status).toBe(200)\n    expect(normalizedResponseBody).toEqual(updatedTask)\n  })\n\n  test('should delete a task', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n    const testTask = await createTestTask(testUser.id)\n\n    // Act\n    const response = await supertest(app).delete(`/api/tasks/${testTask.id}`)\n\n    // Assert\n    expect(response.status).toBe(204)\n  })\n\n  test('should throw error when task does not exist', async () => {\n    // Act\n    const response = await supertest(app).get('/api/tasks/1')\n\n    // Assert\n    expect(response.status).toBe(404)\n    expect(response.body).toEqual({ error: `Error getting task with id 1` })\n  })\n\n  test('should throw an error when trying to delete a task that does not exist', async () => {\n    // Act\n    const response = await supertest(app).delete('/api/tasks/1')\n\n    // Assert\n    expect(response.status).toBe(404)\n    expect(response.body).toEqual({ error: `Task not found` })\n  })\n\n  test('should return all tasks', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n    const testTask = await createTestTask(testUser.id)\n\n    // Act\n    const response = await supertest(app).get('/api/tasks')\n\n    const normalizedResponseBody = response.body.map((task: any) => ({\n      ...task,\n      createdAt: new Date(task.createdAt),\n      updatedAt: new Date(task.updatedAt),\n      deadline: new Date(task.deadline),\n    }))\n\n    // Assert\n    expect(response.status).toBe(200)\n    expect(normalizedResponseBody).toEqual([testTask])\n  })\n\n  test('should throw error if title is missing', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n\n    const task = {\n      description: 'Test Task Description',\n      deadline: new Date(),\n      completed: false,\n      usersId: testUser.id,\n    }\n\n    // Act\n    const response = await supertest(app).post('/api/tasks').send(task)\n\n    // Assert\n    expect(response.status).toBe(500)\n    expect(response.body).toEqual({\n      error: 'Please provide a title for the task',\n    })\n  })\n\n  test('should handle update task status', async () => {\n    // Arrange\n    const testUser = await createTestUser()\n    const testTask = await createTestTask(testUser.id)\n\n    // Act\n    const response = await supertest(app)\n      .put(`/api/tasks/${testTask.id}/status`)\n      .send({ completed: true })\n\n    console.log(response.body)\n\n    // Assert\n    expect(response.status).toBe(200)\n    expect(response.body.completed).toBe(true)\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/integration/user.test.ts",
    "messages": [],
    "suppressedMessages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'password' is assigned a value but never used.",
        "line": 18,
        "column": 13,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 18,
        "endColumn": 21,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      },
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'password' is assigned a value but never used.",
        "line": 76,
        "column": 19,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 76,
        "endColumn": 27,
        "suppressions": [{ "kind": "directive", "justification": "" }]
      }
    ],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/integration/validate-endpoint.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/setup/setup-env.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/setup/setup.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-explicit-any",
        "severity": 2,
        "message": "Unexpected any. Specify a different type.",
        "line": 4,
        "column": 17,
        "nodeType": "TSAnyKeyword",
        "messageId": "unexpectedAny",
        "endLine": 4,
        "endColumn": 20,
        "suggestions": [
          {
            "messageId": "suggestUnknown",
            "fix": { "range": [107, 110], "text": "unknown" },
            "desc": "Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."
          },
          {
            "messageId": "suggestNever",
            "fix": { "range": [107, 110], "text": "never" },
            "desc": "Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."
          }
        ]
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import prisma from '../../../prisma/client'\nimport createServer from '../../utils/server'\n\nexport let app: any\n\nglobal.beforeAll(async () => {\n  app = await createServer()\n})\n\nglobal.beforeEach(async () => {\n  // clear database from all tables\n  await prisma.$transaction([\n    prisma.tasks.deleteMany(),\n    prisma.users.deleteMany(),\n    prisma.tasksLists.deleteMany(),\n  ])\n})\n\nglobal.afterAll(async () => {})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/specificatiion-based/task.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/unit/category.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/unit/task.test.ts",
    "messages": [
      {
        "ruleId": "@typescript-eslint/no-unused-vars",
        "severity": 2,
        "message": "'createTestUser' is defined but never used.",
        "line": 10,
        "column": 10,
        "nodeType": null,
        "messageId": "unusedVar",
        "endLine": 10,
        "endColumn": 24
      }
    ],
    "suppressedMessages": [],
    "errorCount": 1,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "source": "import prisma from '../../../prisma/client'\nimport {\n  createTask,\n  deleteTask,\n  getAllTasks,\n  getTaskById,\n  updateTask,\n  updateTaskStatus,\n} from '../../service/task.service'\nimport { createTestUser } from '../../utils/helperMethods'\nimport { NotFoundError } from '../../utils/NotFoundErrorClass'\n\ndescribe('Task service', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('should return a task when the id exists', async () => {\n    // Arrange\n    const mockTask = {\n      id: '1',\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2021-09-01T00:00:00.000Z'),\n      completed: false,\n      usersId: '1',\n      tasksListsId: '1',\n    }\n\n    prisma.tasks.findUnique = jest.fn().mockResolvedValue(mockTask)\n\n    // Act\n    const result = await getTaskById('1')\n\n    // Assert\n    expect(prisma.tasks.findUnique).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.findUnique).toHaveBeenCalledWith({\n      where: { id: '1' },\n    })\n    expect(result).toEqual(mockTask)\n  })\n\n  test('should throw an error when the id does not exist', async () => {\n    // Arrange\n    prisma.tasks.findUnique = jest.fn().mockResolvedValue(null)\n\n    // Act\n    let error\n    try {\n      await getTaskById('1')\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(prisma.tasks.findUnique).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.findUnique).toHaveBeenCalledWith({\n      where: { id: '1' },\n    })\n    expect(error).toEqual(new Error('Error getting task with id 1'))\n  })\n\n  test('should return all tasks', async () => {\n    // Arrange\n    const mockTasks = [\n      {\n        id: '1',\n        title: 'Test task',\n        description: 'Test description',\n        deadline: new Date('2021-09-01T00:00:00.000Z'),\n        completed: false,\n        usersId: '1',\n        tasksListsId: '1',\n      },\n      {\n        id: '2',\n        title: 'Test task 2',\n        description: 'Test description 2',\n        deadline: new Date('2021-09-02T00:00:00.000Z'),\n        completed: true,\n        usersId: '2',\n        tasksListsId: '2',\n      },\n    ]\n\n    prisma.tasks.findMany = jest.fn().mockResolvedValue(mockTasks)\n\n    // Act\n    const result = await getAllTasks()\n\n    // Assert\n    expect(prisma.tasks.findMany).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.findMany).toHaveBeenCalledWith()\n    expect(result).toEqual(mockTasks)\n  })\n\n  test('should update a task with correct arguments', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2021-09-01T00:00:00.000Z'),\n      completed: false,\n      tasksListId: '1',\n    }\n\n    prisma.tasks.update = jest.fn().mockResolvedValue(mockTaskData)\n    // Act\n    const result = await updateTask('1', mockTaskData)\n\n    // Assert\n    expect(prisma.tasks.update).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.update).toHaveBeenCalledWith({\n      where: { id: '1' },\n      data: {\n        title: 'Test task',\n        description: 'Test description',\n        deadline: new Date('2021-09-01T00:00:00.000Z'),\n        completed: false,\n        tasksLists: {\n          connect: {\n            id: '1',\n          },\n        },\n      },\n    })\n    expect(result).toEqual(mockTaskData)\n  })\n\n  test('should throw an error when updating a task fails', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2021-09-01T00:00:00.000Z'),\n      completed: false,\n      tasksListId: '1',\n    }\n\n    prisma.tasks.update = jest\n      .fn()\n      .mockRejectedValue(new Error('Error updating task with id 1'))\n\n    // Act\n    let error\n    try {\n      await updateTask('1', mockTaskData)\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(prisma.tasks.update).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.update).toHaveBeenCalledWith({\n      where: { id: '1' },\n      data: {\n        title: 'Test task',\n        description: 'Test description',\n        deadline: new Date('2021-09-01T00:00:00.000Z'),\n        completed: false,\n        tasksLists: {\n          connect: {\n            id: '1',\n          },\n        },\n      },\n    })\n    expect(error).toEqual(new Error('Error updating task with id 1'))\n  })\n\n  // TODO: FIX THIS\n  test('should call prisma.task.create with correct arguments', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date(new Date().getTime() + 24 * 60 * 60 * 1000),\n      completed: false,\n      usersId: '1',\n      tasksListsId: '1',\n    }\n\n    prisma.users.findUnique = jest\n      .fn()\n      .mockResolvedValue({ id: '1', name: 'Test user' })\n    prisma.tasks.create = jest.fn().mockResolvedValue(mockTaskData)\n\n    // Act\n    const result = await createTask(mockTaskData)\n\n    // Assert\n    expect(prisma.users.findUnique).toHaveBeenCalledTimes(1)\n    expect(prisma.users.findUnique).toHaveBeenCalledWith({\n      where: { id: '1' },\n    })\n    expect(prisma.tasks.create).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.create).toHaveBeenCalledWith({\n      data: {\n        title: 'Test task',\n        description: 'Test description',\n        deadline: mockTaskData.deadline,\n        completed: false,\n        user: {\n          connect: {\n            id: '1',\n          },\n        },\n        tasksLists: {\n          connect: {\n            id: '1',\n          },\n        },\n      },\n    })\n\n    expect(result).toEqual(mockTaskData)\n  })\n\n  test('should update a task status to completed', async () => {\n    // Arrange\n    const mockTaskData = {\n      id: '1',\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2021-09-01T00:00:00.000Z'),\n      completed: true,\n      usersId: '1',\n      tasksListsId: '1',\n    }\n\n    prisma.tasks.update = jest.fn().mockResolvedValue(mockTaskData)\n\n    // Act\n    const result = await updateTaskStatus('1', true)\n\n    // Assert\n    expect(prisma.tasks.update).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.update).toHaveBeenCalledWith({\n      where: { id: '1' },\n      data: {\n        completed: true,\n      },\n    })\n    expect(result).toEqual(mockTaskData)\n  })\n\n  test('should update a task status to not completed', async () => {\n    // Arrange\n    const mockTaskData = {\n      id: '1',\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2021-09-01T00:00:00.000Z'),\n      completed: false,\n      usersId: '1',\n      tasksListsId: '1',\n    }\n\n    prisma.tasks.update = jest.fn().mockResolvedValue(mockTaskData)\n\n    // Act\n    const result = await updateTaskStatus('1', false)\n\n    // Assert\n    expect(prisma.tasks.update).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.update).toHaveBeenCalledWith({\n      where: { id: '1' },\n      data: {\n        completed: false,\n      },\n    })\n    expect(result).toEqual(mockTaskData)\n  })\n\n  test('should throw an error when trying to update a non-existent task', async () => {\n    // Arrange\n    prisma.tasks.update = jest\n      .fn()\n      .mockRejectedValue(new Error('Task not found'))\n\n    // Act\n    let error\n    try {\n      await updateTaskStatus('999', true)\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(prisma.tasks.update).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.update).toHaveBeenCalledWith({\n      where: { id: '999' },\n      data: {\n        completed: true,\n      },\n    })\n    expect(error).toEqual(new Error('Task not found'))\n  })\n\n  test('should create a task with optional tasksListsId', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date(new Date().getTime() + 24 * 60 * 60 * 1000),\n      completed: false,\n      usersId: '1',\n    }\n\n    prisma.tasks.create = jest.fn().mockResolvedValue(mockTaskData)\n\n    // Act\n    const result = await createTask(mockTaskData)\n\n    // Assert\n    expect(prisma.tasks.create).toHaveBeenCalledWith({\n      data: {\n        title: 'Test task',\n        description: 'Test description',\n        deadline: mockTaskData.deadline,\n        completed: false,\n        user: {\n          connect: {\n            id: '1',\n          },\n        },\n      },\n    })\n    expect(result).toEqual(mockTaskData)\n  })\n\n  test('should throw an error when creating a task with a past deadline', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date('2020-09-01T00:00:00.000Z'),\n      completed: false,\n      usersId: '1',\n    }\n\n    // Act\n    let error\n    try {\n      await createTask(mockTaskData)\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(error).toEqual(\n      new Error('Please provide a future deadline for the task'),\n    )\n  })\n\n  test('should throw error when creating without a title', async () => {\n    // Arrange\n    const mockTaskData = {\n      title: '',\n      description: 'Test description',\n      deadline: new Date(new Date().getTime() + 24 * 60 * 60 * 1000),\n      completed: false,\n      usersId: '1',\n    }\n\n    // Act\n    let error\n    try {\n      await createTask(mockTaskData)\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(error).toEqual(new Error('Please provide a title for the task'))\n  })\n\n  test('should throw an error if user does not exist', async () => {\n    prisma.users.findUnique = jest.fn().mockResolvedValue(null)\n\n    // Arrange\n    const mockTaskData = {\n      title: 'Test task',\n      description: 'Test description',\n      deadline: new Date(new Date().getTime() + 24 * 60 * 60 * 1000),\n      completed: false,\n      usersId: '999',\n    }\n\n    // Act\n    let error\n    try {\n      await createTask(mockTaskData)\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(error).toEqual(new Error('User not found'))\n  })\n\n  test('should delete a task if it exists', async () => {\n    // Arrange\n    prisma.tasks.findFirst = jest.fn().mockResolvedValue({ id: '1' })\n    prisma.tasks.delete = jest.fn().mockResolvedValue({ id: '1' })\n\n    // Act\n    const result = await deleteTask('1')\n\n    // Assert\n    expect(prisma.tasks.delete).toHaveBeenCalledTimes(1)\n    expect(prisma.tasks.delete).toHaveBeenCalledWith({\n      where: { id: '1' },\n    })\n    expect(result).toEqual({ id: '1' })\n  })\n\n  test('should throw an error when deleting a task that does not exist', async () => {\n    // Arrange\n    prisma.tasks.findFirst = jest.fn().mockResolvedValue(null)\n    prisma.tasks.delete = jest\n      .fn()\n      .mockRejectedValue(new Error('Task not found'))\n\n    // Act\n    let error\n    try {\n      await deleteTask('999')\n    } catch (e) {\n      error = e\n    }\n\n    // Assert\n    expect(error).toEqual(new NotFoundError('Task not found'))\n  })\n})\n",
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/tests/unit/user.test.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/utils/NotFoundErrorClass.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/utils/helperMethods.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  },
  {
    "filePath": "/Users/owaisdashti/Software2425/2sem/SQ_Assignments/Assignment_3/src/utils/server.ts",
    "messages": [],
    "suppressedMessages": [],
    "errorCount": 0,
    "fatalErrorCount": 0,
    "warningCount": 0,
    "fixableErrorCount": 0,
    "fixableWarningCount": 0,
    "usedDeprecatedRules": []
  }
]
